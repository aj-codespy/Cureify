generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user1 {
  id                        Int          @id @default(autoincrement())
  email                     String       @unique(map: "User_email_key")
  createdAt                 DateTime     @default(now())
  password                  String
  updatedAt                 DateTime
  accessToken               String?
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  isAdmin                   Boolean      @default(false)
  isVerified                Boolean      @default(false)
  refreshToken              String?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  userprofile               userprofile?
}

model userprofile {
  id                     String          @id @default(cuid())
  fullName               String
  contact                String
  age                    Int
  gender                 String
  birthdate              DateTime
  previousMedicalHistory String?
  familyHistory          String?
  addiction              String?
  address                String?
  userId                 Int?     @unique(map: "UserProfile_userId_key")
  user1                  user1?   @relation(fields: [userId], references: [id], map: "UserProfile_userId_fkey")
  userId2                String?  @unique(map: "UserProfile_userId_user_key")
  user                   User?    @relation(fields: [userId2], references: [id], map: "UserProfile_userId2_user_fkey")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  userprofile   userprofile?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  // Change from Int to String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   // Change from Int to String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String  // Change from Int to String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
